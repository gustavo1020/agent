from google.adk.agents import Agent
import random
from typing import Dict, List, Optional
import psycopg2
import psycopg2.extras
from typing import Optional
import decimal
import datetime
import requests

# Configuraci√≥n del juego (importada localmente para evitar problemas de dependencias)
try:
    from .config import HIRAGANA_GAME_CONFIG, EXTENDED_DIFFICULTY
except ImportError:
    # Fallback si no se puede importar el archivo de configuraci√≥n
    HIRAGANA_GAME_CONFIG = {
        "max_questions_per_session": 50,
        "show_hints": True,
        "auto_advance": False,
        "celebration_emojis": ["üéâ", "üåü", "üî•", "üí´", "üéä", "üèÜ"],
        "encouragement_messages": [
            "¬°Genial! Sigue as√≠ È†ëÂºµ„Å£„Å¶ÔºÅ",
            "¬°Excelente! „Åå„Çì„Å∞„Å£„Å¶ÔºÅ", 
            "¬°Perfecto! „Åô„Å∞„Çâ„Åó„ÅÑÔºÅ",
            "¬°Incre√≠ble progreso! „Çà„Åè„Åß„Åç„Åæ„Åó„ÅüÔºÅ"
        ]
    }
    
    EXTENDED_DIFFICULTY = {
        "principiante": ["„ÅÇ", "„ÅÑ", "„ÅÜ", "„Åà", "„Åä", "„Åã", "„Åç", "„Åè", "„Åë", "„Åì"],
        "basico": ["„ÅÇ", "„ÅÑ", "„ÅÜ", "„Åà", "„Åä", "„Åã", "„Åç", "„Åè", "„Åë", "„Åì", "„Åï", "„Åó", "„Åô", "„Åõ", "„Åù"],
        "intermedio": "primeros_30_caracteres",
        "avanzado": "todos_los_caracteres",
        "maestro": "incluye_combinaciones_especiales"
    }

# Diccionario completo de hiragana con sus romanizaciones
HIRAGANA_DICT = {
    # Vocales b√°sicas
    '„ÅÇ': 'a', '„ÅÑ': 'i', '„ÅÜ': 'u', '„Åà': 'e', '„Åä': 'o',
    # K
    '„Åã': 'ka', '„Åç': 'ki', '„Åè': 'ku', '„Åë': 'ke', '„Åì': 'ko',
    # G
    '„Åå': 'ga', '„Åé': 'gi', '„Åê': 'gu', '„Åí': 'ge', '„Åî': 'go',
    # S
    '„Åï': 'sa', '„Åó': 'shi', '„Åô': 'su', '„Åõ': 'se', '„Åù': 'so',
    # Z
    '„Åñ': 'za', '„Åò': 'ji', '„Åö': 'zu', '„Åú': 'ze', '„Åû': 'zo',
    # T
    '„Åü': 'ta', '„Å°': 'chi', '„Å§': 'tsu', '„Å¶': 'te', '„Å®': 'to',
    # D
    '„Å†': 'da', '„Å¢': 'ji', '„Å•': 'zu', '„Åß': 'de', '„Å©': 'do',
    # N
    '„Å™': 'na', '„Å´': 'ni', '„Å¨': 'nu', '„Å≠': 'ne', '„ÅÆ': 'no',
    # H
    '„ÅØ': 'ha', '„Å≤': 'hi', '„Åµ': 'fu', '„Å∏': 'he', '„Åª': 'ho',
    # B
    '„Å∞': 'ba', '„Å≥': 'bi', '„Å∂': 'bu', '„Åπ': 'be', '„Åº': 'bo',
    # P
    '„Å±': 'pa', '„Å¥': 'pi', '„Å∑': 'pu', '„Å∫': 'pe', '„ÅΩ': 'po',
    # M
    '„Åæ': 'ma', '„Åø': 'mi', '„ÇÄ': 'mu', '„ÇÅ': 'me', '„ÇÇ': 'mo',
    # Y
    '„ÇÑ': 'ya', '„ÇÜ': 'yu', '„Çà': 'yo',
    # R
    '„Çâ': 'ra', '„Çä': 'ri', '„Çã': 'ru', '„Çå': 're', '„Çç': 'ro',
    # W
    '„Çè': 'wa', '„Çê': 'wi', '„Çë': 'we', '„Çí': 'wo',
    # N
    '„Çì': 'n'
}

# Diccionario inverso para buscar hiragana por romanizaci√≥n
ROMAJI_TO_HIRAGANA = {v: k for k, v in HIRAGANA_DICT.items()}

# Variables globales para el estado del juego
game_state = {
    'current_question': None,
    'score': 0,
    'total_questions': 0,
    'current_mode': None,
    'difficulty_level': 'basico'
}

# Niveles de dificultad expandidos desde config
DIFFICULTY_LEVELS = {
    'principiante': EXTENDED_DIFFICULTY['principiante'],
    'basico': EXTENDED_DIFFICULTY['basico'],
    'intermedio': list(HIRAGANA_DICT.keys())[:30],
    'avanzado': list(HIRAGANA_DICT.keys()),
    'maestro': list(HIRAGANA_DICT.keys())  # Incluye todos + combinaciones futuras
}

# ---------------- TOOLS DEL JUEGO ---------------- #

def start_hiragana_game() -> dict:
    """
    Inicia el juego de hiragana mostrando las opciones disponibles.
    """
    global game_state
    game_state = {
        'current_question': None,
        'score': 0,
        'total_questions': 0,
        'current_mode': None,
        'difficulty_level': 'basico'
    }
    
    return {
        "status": "success",
        "message": "üéÆ ¬°Bienvenido al Juego Interactivo de Hiragana! üéå\n\n"
                  "**Modos de Juego Disponibles:**\n"
                  "1Ô∏è‚É£ **Pregunta Abierta - Hiragana**: Te muestro un hiragana, escribes el romaji\n"
                  "2Ô∏è‚É£ **Pregunta Abierta - Romaji**: Te doy el romaji, escribes el hiragana\n"
                  "3Ô∏è‚É£ **üÜï M√∫ltiple Choice - Hiragana**: Hiragana con 4 opciones de romaji\n"
                  "4Ô∏è‚É£ **üÜï M√∫ltiple Choice - Romaji**: Romaji con 4 opciones de hiragana\n\n"
                  
                  "**‚ú® Caracter√≠sticas Especiales:**\n"
                  "üöÄ **Auto-Avance (M√∫ltiple Choice)**: Despu√©s de responder, autom√°ticamente genera la siguiente pregunta\n"
                  "üéØ **Respuesta Inteligente**: Responde con texto o n√∫meros, el sistema detecta autom√°ticamente\n"
                  "üìä **Progreso en Tiempo Real**: Estad√≠sticas actualizadas despu√©s de cada respuesta\n\n"
                  
                  "**Herramientas Disponibles:**\n"
                  "‚öôÔ∏è **Dificultad**: 5 niveles (principiante ‚Üí maestro)\n"
                  "üìä **Estad√≠sticas**: Progreso detallado y recomendaciones\n"
                  "üìö **Tabla Completa**: Todos los hiragana organizados\n"
                  "üí° **Consejos**: Tips para aprender m√°s eficientemente\n"
                  "üé≤ **Pr√°ctica**: Conjuntos aleatorios para estudiar\n\n"
                  
                  "üí° **Recomendaci√≥n para principiantes**: Empieza con m√∫ltiple choice en nivel principiante.\n"
                  "üéÆ **Flujo recomendado**: M√∫ltiple choice ‚Üí acostumbrarse ‚Üí preguntas abiertas para el desaf√≠o.\n\n"
                  "üöÄ **Para empezar**: Dime qu√© tipo de pregunta quieres o configura tu nivel primero.",
        "game_state": game_state
    }

def set_difficulty_level(level: str) -> dict:
    """
    Configura el nivel de dificultad del juego.
    
    Args:
        level (str): 'principiante', 'basico', 'intermedio', 'avanzado' o 'maestro'
    """
    global game_state
    
    available_levels = list(DIFFICULTY_LEVELS.keys())
    if level.lower() not in DIFFICULTY_LEVELS:
        return {
            "status": "error",
            "message": f"‚ùå Nivel no v√°lido.\n\n"
                      f"üéØ **Opciones disponibles**:\n"
                      f"‚Ä¢ **Principiante**: {len(DIFFICULTY_LEVELS['principiante'])} caracteres b√°sicos\n"
                      f"‚Ä¢ **B√°sico**: {len(DIFFICULTY_LEVELS['basico'])} caracteres fundamentales\n"
                      f"‚Ä¢ **Intermedio**: {len(DIFFICULTY_LEVELS['intermedio'])} caracteres variados\n"
                      f"‚Ä¢ **Avanzado**: {len(DIFFICULTY_LEVELS['avanzado'])} caracteres completos\n"
                      f"‚Ä¢ **Maestro**: Todos los caracteres + desaf√≠os especiales"
        }
    
    game_state['difficulty_level'] = level.lower()
    characters = DIFFICULTY_LEVELS[level.lower()]
    
    # Descripci√≥n personalizada por nivel
    level_descriptions = {
        'principiante': "üå± Ideal para comenzar - vocales y primeros sonidos",
        'basico': "üìö Fundamentos s√≥lidos - caracteres esenciales",
        'intermedio': "üéØ Ampl√≠a tu conocimiento - variedad de familias",
        'avanzado': "üî• Dominio completo - todos los hiragana",
        'maestro': "üèÜ Desaf√≠o supremo - perfecci√≥n total"
    }
    
    return {
        "status": "success",
        "message": f"üéØ **Dificultad configurada**: {level.upper()}\n\n"
                  f"{level_descriptions.get(level.lower(), '')}\n\n"
                  f"üìä **Caracteres incluidos**: {len(characters)}\n"
                  f"üî§ **Muestra**: {' '.join(characters[:8])}{'...' if len(characters) > 8 else ''}\n\n"
                  f"üéÆ ¬°Listo para jugar! Genera tu primera pregunta.",
        "difficulty": level.lower(),
        "character_count": len(characters),
        "sample_characters": characters[:10]
    }

def generate_hiragana_question() -> dict:
    """
    Genera una pregunta donde el usuario debe adivinar el romaji de un hiragana.
    """
    global game_state
    
    characters = DIFFICULTY_LEVELS[game_state['difficulty_level']]
    hiragana_char = random.choice(characters)
    romaji_answer = HIRAGANA_DICT[hiragana_char]
    
    game_state['current_question'] = {
        'hiragana': hiragana_char,
        'romaji': romaji_answer,
        'mode': 'hiragana_to_romaji'
    }
    
    return {
        "status": "success",
        "message": f"üéØ **Pregunta #{game_state['total_questions'] + 1}**\n\n"
                  f"üî§ **Hiragana**: {hiragana_char}\n\n"
                  f"‚ùì ¬øC√≥mo se lee este hiragana en romaji?\n"
                  f"üí° Escribe tu respuesta (ejemplo: 'ka', 'shi', 'tsu')",
        "question": {
            "hiragana": hiragana_char,
            "mode": "hiragana_to_romaji"
        }
    }

def generate_romaji_question() -> dict:
    """
    Genera una pregunta donde el usuario debe escribir el hiragana correspondiente al romaji.
    """
    global game_state
    
    characters = DIFFICULTY_LEVELS[game_state['difficulty_level']]
    hiragana_char = random.choice(characters)
    romaji_prompt = HIRAGANA_DICT[hiragana_char]
    
    game_state['current_question'] = {
        'hiragana': hiragana_char,
        'romaji': romaji_prompt,
        'mode': 'romaji_to_hiragana'
    }
    
    return {
        "status": "success",
        "message": f"üéØ **Pregunta #{game_state['total_questions'] + 1}**\n\n"
                  f"üî§ **Romaji**: {romaji_prompt}\n\n"
                  f"‚ùì ¬øCu√°l es el hiragana para este sonido?\n"
                  f"üí° Escribe el car√°cter hiragana correspondiente",
        "question": {
            "romaji": romaji_prompt,
            "mode": "romaji_to_hiragana"
        }
    }

def check_answer(user_answer: str) -> dict:
    """
    Verifica la respuesta del usuario y proporciona feedback.
    
    Args:
        user_answer (str): La respuesta proporcionada por el usuario
    """
    global game_state
    
    if not game_state['current_question']:
        return {
            "status": "error",
            "message": "‚ùå No hay pregunta activa. Genera una nueva pregunta primero."
        }
    
    question = game_state['current_question']
    user_answer = user_answer.strip().lower()
    is_correct = False
    
    if question['mode'] == 'hiragana_to_romaji':
        correct_answer = question['romaji']
        is_correct = user_answer == correct_answer.lower()
        feedback_msg = f"üî§ **Hiragana**: {question['hiragana']}\n" \
                      f"‚úÖ **Respuesta correcta**: {correct_answer}\n" \
                      f"üìù **Tu respuesta**: {user_answer}"
    else:  # romaji_to_hiragana
        correct_answer = question['hiragana']
        is_correct = user_answer == correct_answer
        feedback_msg = f"üî§ **Romaji**: {question['romaji']}\n" \
                      f"‚úÖ **Respuesta correcta**: {correct_answer}\n" \
                      f"üìù **Tu respuesta**: {user_answer}"
    
    game_state['total_questions'] += 1
    
    if is_correct:
        game_state['score'] += 1
        # Usar emojis y mensajes de celebraci√≥n de la configuraci√≥n
        result_emoji = random.choice(HIRAGANA_GAME_CONFIG['celebration_emojis'])
        celebration_msg = random.choice(HIRAGANA_GAME_CONFIG['encouragement_messages'])
        result_text = f"¬°CORRECTO! {celebration_msg}"
    else:
        result_emoji = "‚ùå"
        result_text = "Incorrecto - ¬°Sigue intentando! È†ëÂºµ„Å£„Å¶ÔºÅ"
    
    # Limpiar la pregunta actual
    game_state['current_question'] = None
    
    accuracy = (game_state['score'] / game_state['total_questions']) * 100 if game_state['total_questions'] > 0 else 0
    
    # Generar mensaje motivacional basado en el progreso
    motivation_msg = ""
    if game_state['total_questions'] >= 5:
        if accuracy >= 90:
            motivation_msg = "\nüåü **¬°Rendimiento excepcional!** Considera subir al siguiente nivel."
        elif accuracy >= 75:
            motivation_msg = "\nüëè **¬°Muy buen progreso!** Mant√©n el ritmo."
        elif accuracy >= 50:
            motivation_msg = "\nüí™ **Vas mejorando!** La pr√°ctica hace al maestro."
        else:
            motivation_msg = "\nüéØ **No te desanimes!** Cada error es una oportunidad de aprender."
    
    return {
        "status": "success",
        "message": f"{result_emoji} **{result_text}**\n\n"
                  f"{feedback_msg}\n\n"
                  f"üìä **Estad√≠sticas**:\n"
                  f"‚Ä¢ Puntuaci√≥n: {game_state['score']}/{game_state['total_questions']}\n"
                  f"‚Ä¢ Precisi√≥n: {accuracy:.1f}%"
                  f"{motivation_msg}\n\n"
                  f"üéÆ ¬øQuieres continuar? Genera otra pregunta o cambia de modo.",
        "correct": is_correct,
        "score": game_state['score'],
        "total": game_state['total_questions'],
        "accuracy": accuracy
    }

def get_game_stats() -> dict:
    """
    Muestra las estad√≠sticas actuales del juego.
    """
    global game_state
    
    if game_state['total_questions'] == 0:
        return {
            "status": "success",
            "message": "üìä **Estad√≠sticas del Juego**\n\n"
                      "üéÆ A√∫n no has respondido ninguna pregunta.\n"
                      "¬°Comienza el juego para ver tus estad√≠sticas!",
            "stats": game_state
        }
    
    accuracy = (game_state['score'] / game_state['total_questions']) * 100
    
    # Determinar nivel de rendimiento
    if accuracy >= 90:
        performance = "üèÜ ¬°Excelente!"
    elif accuracy >= 75:
        performance = "ü•â Muy bien"
    elif accuracy >= 60:
        performance = "üìö Sigue practicando"
    else:
        performance = "üí™ ¬°No te rindas!"
    
    return {
        "status": "success",
        "message": f"üìä **Estad√≠sticas del Juego**\n\n"
                  f"üéØ **Dificultad**: {game_state['difficulty_level'].upper()}\n"
                  f"‚úÖ **Respuestas correctas**: {game_state['score']}\n"
                  f"üìù **Total de preguntas**: {game_state['total_questions']}\n"
                  f"üéØ **Precisi√≥n**: {accuracy:.1f}%\n"
                  f"üèÖ **Rendimiento**: {performance}\n\n"
                  f"{'üî• **¬°Pregunta activa!**' if game_state['current_question'] else 'üéÆ Listo para nueva pregunta'}",
        "stats": {
            "score": game_state['score'],
            "total": game_state['total_questions'],
            "accuracy": accuracy,
            "difficulty": game_state['difficulty_level'],
            "has_active_question": game_state['current_question'] is not None
        }
    }

def show_hiragana_table() -> dict:
    """
    Muestra la tabla completa de hiragana organizada por familias.
    """
    table_sections = {
        "Vocales": ['„ÅÇ', '„ÅÑ', '„ÅÜ', '„Åà', '„Åä'],
        "K": ['„Åã', '„Åç', '„Åè', '„Åë', '„Åì'],
        "G": ['„Åå', '„Åé', '„Åê', '„Åí', '„Åî'],
        "S": ['„Åï', '„Åó', '„Åô', '„Åõ', '„Åù'],
        "Z": ['„Åñ', '„Åò', '„Åö', '„Åú', '„Åû'],
        "T": ['„Åü', '„Å°', '„Å§', '„Å¶', '„Å®'],
        "D": ['„Å†', '„Å¢', '„Å•', '„Åß', '„Å©'],
        "N": ['„Å™', '„Å´', '„Å¨', '„Å≠', '„ÅÆ'],
        "H": ['„ÅØ', '„Å≤', '„Åµ', '„Å∏', '„Åª'],
        "B": ['„Å∞', '„Å≥', '„Å∂', '„Åπ', '„Åº'],
        "P": ['„Å±', '„Å¥', '„Å∑', '„Å∫', '„ÅΩ'],
        "M": ['„Åæ', '„Åø', '„ÇÄ', '„ÇÅ', '„ÇÇ'],
        "Y": ['„ÇÑ', '„ÇÜ', '„Çà'],
        "R": ['„Çâ', '„Çä', '„Çã', '„Çå', '„Çç'],
        "W": ['„Çè', '„Çê', '„Çë', '„Çí'],
        "N": ['„Çì']
    }
    
    table_text = "üìã **Tabla Completa de Hiragana** üéå\n\n"
    
    for family, characters in table_sections.items():
        if characters:  # Evitar secciones vac√≠as
            table_text += f"**{family}**: "
            char_pairs = [f"{char}({HIRAGANA_DICT[char]})" for char in characters if char in HIRAGANA_DICT]
            table_text += " ".join(char_pairs) + "\n\n"
    
    table_text += f"üìä **Total de caracteres**: {len(HIRAGANA_DICT)}\n"
    table_text += "üí° **Formato**: hiragana(romaji)"
    
    return {
        "status": "success",
        "message": table_text,
        "total_characters": len(HIRAGANA_DICT)
    }

def get_random_hiragana_set(count: int = 5) -> dict:
    """
    Genera un conjunto aleatorio de hiragana para pr√°ctica.
    
    Args:
        count (int): N√∫mero de caracteres a mostrar (por defecto 5)
    """
    global game_state
    
    if count > 20:
        count = 20
    elif count < 1:
        count = 5
    
    characters = DIFFICULTY_LEVELS[game_state['difficulty_level']]
    selected_chars = random.sample(characters, min(count, len(characters)))
    
    practice_text = f"üé≤ **Conjunto Aleatorio de Pr√°ctica** ({game_state['difficulty_level'].upper()})\n\n"
    
    for i, char in enumerate(selected_chars, 1):
        romaji = HIRAGANA_DICT[char]
        practice_text += f"{i}. {char} = {romaji}\n"
    
    practice_text += f"\nüí° Estudia estos {len(selected_chars)} caracteres y luego prueba el juego!"
    
    return {
        "status": "success",
        "message": practice_text,
        "characters": [{"hiragana": char, "romaji": HIRAGANA_DICT[char]} for char in selected_chars]
    }

def generate_multiple_choice_question(question_type: str = "hiragana_to_romaji") -> dict:
    """
    Genera una pregunta de opci√≥n m√∫ltiple para facilitar el aprendizaje.
    
    Args:
        question_type (str): "hiragana_to_romaji" o "romaji_to_hiragana"
    """
    global game_state
    
    characters = DIFFICULTY_LEVELS[game_state['difficulty_level']]
    
    # Seleccionar el car√°cter correcto
    correct_char = random.choice(characters)
    correct_answer = HIRAGANA_DICT[correct_char]
    
    # Generar opciones incorrectas del mismo nivel de dificultad
    all_options = []
    if question_type == "hiragana_to_romaji":
        # Mostrar hiragana, opciones de romaji
        question_display = correct_char
        correct_option = correct_answer
        
        # Generar 3 opciones incorrectas
        wrong_chars = [char for char in characters if char != correct_char]
        if len(wrong_chars) >= 3:
            wrong_options = random.sample(wrong_chars, 3)
            wrong_romaji = [HIRAGANA_DICT[char] for char in wrong_options]
        else:
            # Si no hay suficientes caracteres en el nivel, usar de otros niveles
            all_chars = list(HIRAGANA_DICT.keys())
            wrong_chars = [char for char in all_chars if char != correct_char]
            wrong_options = random.sample(wrong_chars, 3)
            wrong_romaji = [HIRAGANA_DICT[char] for char in wrong_options]
        
        all_options = [correct_option] + wrong_romaji
        
    else:  # romaji_to_hiragana
        # Mostrar romaji, opciones de hiragana
        question_display = correct_answer
        correct_option = correct_char
        
        # Generar 3 opciones incorrectas
        wrong_chars = [char for char in characters if char != correct_char]
        if len(wrong_chars) >= 3:
            wrong_options = random.sample(wrong_chars, 3)
        else:
            all_chars = list(HIRAGANA_DICT.keys())
            wrong_options = random.sample([char for char in all_chars if char != correct_char], 3)
        
        all_options = [correct_option] + wrong_options
    
    # Mezclar las opciones
    random.shuffle(all_options)
    
    # Encontrar la posici√≥n de la respuesta correcta
    correct_position = all_options.index(correct_option) + 1  # +1 porque las opciones empiezan en 1
    
    # Guardar la pregunta en el estado del juego
    game_state['current_question'] = {
        'type': 'multiple_choice',
        'question_type': question_type,
        'display': question_display,
        'correct_answer': correct_option,
        'correct_position': correct_position,
        'options': all_options,
        'hiragana': correct_char,
        'romaji': correct_answer
    }
    
    # Formatear el mensaje de la pregunta
    mode_text = "Hiragana ‚Üí Romaji" if question_type == "hiragana_to_romaji" else "Romaji ‚Üí Hiragana"
    question_text = f"üéØ **Pregunta #{game_state['total_questions'] + 1}** (Opci√≥n M√∫ltiple)\n\n"
    question_text += f"üìù **Modo**: {mode_text}\n"
    
    if question_type == "hiragana_to_romaji":
        question_text += f"üî§ **Hiragana**: {question_display}\n\n"
        question_text += "‚ùì ¬øC√≥mo se lee este hiragana?\n\n"
    else:
        question_text += f"üî§ **Romaji**: {question_display}\n\n"
        question_text += "‚ùì ¬øCu√°l es el hiragana correcto?\n\n"
    
    question_text += "**Opciones:**\n"
    for i, option in enumerate(all_options, 1):
        question_text += f"{i}. {option}\n"
    
    question_text += f"\nüí° Responde con el n√∫mero de la opci√≥n correcta (1-4)"
    
    return {
        "status": "success",
        "message": question_text,
        "question": {
            "type": "multiple_choice",
            "display": question_display,
            "options": all_options,
            "mode": question_type
        }
    }

def check_multiple_choice_answer(option_number: str) -> dict:
    """
    Verifica la respuesta de opci√≥n m√∫ltiple del usuario.
    
    Args:
        option_number (str): N√∫mero de la opci√≥n seleccionada (1-4)
    """
    global game_state
    
    if not game_state['current_question'] or game_state['current_question'].get('type') != 'multiple_choice':
        return {
            "status": "error",
            "message": "‚ùå No hay pregunta de opci√≥n m√∫ltiple activa. Genera una nueva pregunta primero."
        }
    
    try:
        selected_option = int(option_number)
    except ValueError:
        return {
            "status": "error",
            "message": "‚ùå Por favor, ingresa un n√∫mero v√°lido (1-4)."
        }
    
    if selected_option < 1 or selected_option > 4:
        return {
            "status": "error",
            "message": "‚ùå Por favor, selecciona una opci√≥n entre 1 y 4."
        }
    
    question = game_state['current_question']
    is_correct = selected_option == question['correct_position']
    selected_answer = question['options'][selected_option - 1]
    correct_answer = question['correct_answer']
    
    game_state['total_questions'] += 1
    
    if is_correct:
        game_state['score'] += 1
        result_emoji = random.choice(HIRAGANA_GAME_CONFIG['celebration_emojis'])
        celebration_msg = random.choice(HIRAGANA_GAME_CONFIG['encouragement_messages'])
        result_text = f"¬°CORRECTO! {celebration_msg}"
    else:
        result_emoji = "‚ùå"
        result_text = "Incorrecto - ¬°Sigue intentando! È†ëÂºµ„Å£„Å¶ÔºÅ"
    
    # Mostrar todas las opciones con la respuesta correcta marcada
    options_review = "**Opciones:**\n"
    for i, option in enumerate(question['options'], 1):
        if i == question['correct_position']:
            options_review += f"{i}. {option} ‚úÖ **(Correcta)**\n"
        elif i == selected_option:
            options_review += f"{i}. {option} ‚ùå **(Tu selecci√≥n)**\n"
        else:
            options_review += f"{i}. {option}\n"
    
    mode_text = "Hiragana ‚Üí Romaji" if question['question_type'] == "hiragana_to_romaji" else "Romaji ‚Üí Hiragana"
    
    feedback_msg = f"üìù **Modo**: {mode_text}\n"
    feedback_msg += f"üî§ **Pregunta**: {question['display']}\n"
    feedback_msg += f"‚úÖ **Respuesta correcta**: {correct_answer}\n"
    feedback_msg += f"üìù **Tu selecci√≥n**: Opci√≥n {selected_option} ({selected_answer})\n\n"
    feedback_msg += options_review
    
    # Limpiar la pregunta actual
    game_state['current_question'] = None
    
    accuracy = (game_state['score'] / game_state['total_questions']) * 100 if game_state['total_questions'] > 0 else 0
    
    # Generar mensaje motivacional
    motivation_msg = ""
    if game_state['total_questions'] >= 3:
        if accuracy >= 90:
            motivation_msg = "\nüåü **¬°Rendimiento excepcional!** Las opciones m√∫ltiples te est√°n ayudando."
        elif accuracy >= 75:
            motivation_msg = "\nüëè **¬°Muy buen progreso!** Considera intentar preguntas abiertas tambi√©n."
        elif accuracy >= 50:
            motivation_msg = "\nüí™ **Vas mejorando!** Las opciones m√∫ltiples son perfectas para aprender."
        else:
            motivation_msg = "\nüéØ **No te desanimes!** Sigue usando opciones m√∫ltiples para familiarizarte."
    
    # Generar autom√°ticamente la siguiente pregunta del mismo tipo
    next_question_result = generate_multiple_choice_question(question['question_type'])
    
    if next_question_result['status'] == 'success':
        next_question_text = f"\n\nüéØ **SIGUIENTE PREGUNTA:**\n\n{next_question_result['message']}"
    else:
        next_question_text = "\n\nüéÆ ¬øQuieres continuar? Genera otra pregunta (abierta o m√∫ltiple choice)."
    
    return {
        "status": "success",
        "message": f"{result_emoji} **{result_text}**\n\n"
                  f"{feedback_msg}\n"
                  f"üìä **Estad√≠sticas**:\n"
                  f"‚Ä¢ Puntuaci√≥n: {game_state['score']}/{game_state['total_questions']}\n"
                  f"‚Ä¢ Precisi√≥n: {accuracy:.1f}%"
                  f"{motivation_msg}"
                  f"{next_question_text}",
        "correct": is_correct,
        "score": game_state['score'],
        "total": game_state['total_questions'],
        "accuracy": accuracy,
        "auto_generated_next": next_question_result['status'] == 'success'
    }

def quick_answer(answer: str) -> dict:
    """
    Funci√≥n universal para responder tanto preguntas de opci√≥n m√∫ltiple como abiertas.
    Detecta autom√°ticamente el tipo de pregunta activa y procesa la respuesta.
    
    Args:
        answer (str): La respuesta del usuario (n√∫mero 1-4 para m√∫ltiple choice, texto para abiertas)
    """
    global game_state
    
    if not game_state['current_question']:
        return {
            "status": "error",
            "message": "‚ùå No hay pregunta activa. Genera una nueva pregunta primero."
        }
    
    question_type = game_state['current_question'].get('type', 'open')
    
    if question_type == 'multiple_choice':
        # Es una pregunta de opci√≥n m√∫ltiple
        if answer.strip().isdigit() and 1 <= int(answer.strip()) <= 4:
            return check_multiple_choice_answer(answer.strip())
        else:
            return {
                "status": "error", 
                "message": "‚ùå Para preguntas de opci√≥n m√∫ltiple, responde con un n√∫mero del 1 al 4."
            }
    else:
        # Es una pregunta abierta
        return check_answer(answer)

def get_learning_tips() -> dict:
    """
    Proporciona consejos √∫tiles para aprender hiragana m√°s eficientemente.
    """
    tips = [
        "üìö **Asociaci√≥n Visual**: Conecta la forma del hiragana con objetos familiares",
        "üîÑ **Pr√°ctica Espaciada**: Repite caracteres dif√≠ciles m√°s frecuentemente", 
        "‚úçÔ∏è **Escritura Manual**: Practica escribir a mano para mejor memorizaci√≥n",
        "üìñ **Grupos por Familias**: Aprende por familias de sonidos (ka-ki-ku-ke-ko)",
        "üéµ **Mnemot√©cnias**: Crea frases o canciones para recordar sonidos",
        "üì± **Pr√°ctica Diaria**: Dedica al menos 15 minutos diarios",
        "üéØ **Enfoque Gradual**: Domina un nivel antes de avanzar al siguiente",
        "üëÄ **Lectura Contextual**: Lee palabras completas, no solo caracteres aislados"
    ]
    
    random_tips = random.sample(tips, min(4, len(tips)))
    
    return {
        "status": "success",
        "message": "üí° **Consejos para Dominar el Hiragana**\n\n" + 
                  "\n".join(random_tips) +
                  "\n\nüéå **¬°Recuerda!** La constancia es clave para el √©xito en japon√©s.",
        "tips": random_tips
    }

def show_progress_summary() -> dict:
    """
    Muestra un resumen completo del progreso del usuario con recomendaciones.
    """
    global game_state
    
    if game_state['total_questions'] == 0:
        return {
            "status": "success",
            "message": "üìà **Resumen de Progreso**\n\n"
                      "üéØ A√∫n no has comenzado tu aventura de aprendizaje.\n"
                      "üöÄ ¬°Empieza ahora y descubre el fascinante mundo del hiragana!",
            "progress": {"status": "not_started"}
        }
    
    accuracy = (game_state['score'] / game_state['total_questions']) * 100
    current_level = game_state['difficulty_level']
    total_chars_in_level = len(DIFFICULTY_LEVELS[current_level])
    
    # An√°lisis de rendimiento
    if accuracy >= 85:
        performance = "üèÜ Excelente"
        recommendation = f"¬°Incre√≠ble! Considera avanzar al siguiente nivel de dificultad."
    elif accuracy >= 70:
        performance = "ü•à Muy Bueno"
        recommendation = "¬°Bien hecho! Con un poco m√°s de pr√°ctica podr√°s avanzar de nivel."
    elif accuracy >= 55:
        performance = "ü•â Promedio"
        recommendation = "Mant√©n la pr√°ctica constante. Enf√≥cate en los caracteres que m√°s se te dificultan."
    else:
        performance = "üìö En Desarrollo"
        recommendation = "No te desanimes. Considera practicar en un nivel m√°s b√°sico primero."
    
    # C√°lculo estimado de dominio
    chars_practiced = min(game_state['total_questions'], total_chars_in_level)
    mastery_percentage = (chars_practiced / total_chars_in_level) * (accuracy / 100) * 100
    
    return {
        "status": "success",
        "message": f"üìà **Resumen Completo de Progreso**\n\n"
                  f"üéØ **Nivel Actual**: {current_level.upper()}\n"
                  f"üìä **Rendimiento**: {performance}\n"
                  f"‚úÖ **Respuestas Correctas**: {game_state['score']}/{game_state['total_questions']}\n"
                  f"üéØ **Precisi√≥n**: {accuracy:.1f}%\n"
                  f"üìà **Dominio Estimado**: {mastery_percentage:.1f}%\n\n"
                  f"üí° **Recomendaci√≥n**: {recommendation}\n\n"
                  f"üéÆ ¬°Contin√∫a practicando para mejorar tu dominio del hiragana!",
        "progress": {
            "level": current_level,
            "accuracy": accuracy,
            "mastery": mastery_percentage,
            "performance": performance,
            "total_questions": game_state['total_questions'],
            "correct_answers": game_state['score']
        }
    }

def reset_game_progress() -> dict:
    """
    Reinicia completamente el progreso del juego.
    """
    global game_state
    
    old_stats = f"{game_state['score']}/{game_state['total_questions']}"
    
    game_state = {
        'current_question': None,
        'score': 0,
        'total_questions': 0,
        'current_mode': None,
        'difficulty_level': 'basico'
    }
    
    return {
        "status": "success",
        "message": f"üîÑ **Progreso Reiniciado**\n\n"
                  f"üìä **Estad√≠sticas Anteriores**: {old_stats}\n"
                  f"üéØ **Estado Actual**: Listo para comenzar\n"
                  f"üéÆ **Dificultad**: B√°sico\n\n"
                  f"¬°Perfecto momento para un nuevo comienzo! üåü",
        "previous_stats": old_stats,
        "new_state": game_state
    }

# ---------------- AGENTE PRINCIPAL ---------------- #

root_agent = Agent(
    name="japanese_tutor",
    model="gemini-2.0-flash",
    description="Agente interactivo para aprender hiragana japon√©s con juegos educativos y sistema de progresi√≥n.",
    instruction=(
        "Eres un tutor de japon√©s especializado en ense√±ar hiragana a trav√©s de juegos interactivos y motivadores.\n\n"
        
        "üéÆ **FUNCIONALIDADES PRINCIPALES**:\n"
        "1. **Preguntas Abiertas**: Hiragana ‚Üî Romaji sin opciones (m√°s desafiante)\n"
        "2. **üÜï M√∫ltiple Choice**: 4 opciones para elegir (ideal para principiantes)\n"
        "3. **5 Niveles de Dificultad**: Principiante (10) ‚Üí B√°sico (15) ‚Üí Intermedio (30) ‚Üí Avanzado (46) ‚Üí Maestro (46+)\n"
        "4. **Sistema de Puntuaci√≥n Inteligente**: Estad√≠sticas detalladas con feedback motivacional\n"
        "5. **Herramientas de Aprendizaje**: Tabla completa, tips educativos, res√∫menes de progreso\n"
        "6. **Adaptabilidad**: Cambia entre modos seg√∫n el nivel de comodidad del usuario\n\n"
        
        "üéØ **COMANDOS DISPONIBLES**:\n"
        "**üéÆ Juego:**\n"
        "- 'empezar juego' / 'start': Inicia el sistema de juego\n"
        "- 'pregunta hiragana': Genera pregunta hiragana ‚Üí romaji (abierta)\n"
        "- 'pregunta romaji': Genera pregunta romaji ‚Üí hiragana (abierta)\n"
        "- 'multiple choice hiragana': Pregunta hiragana ‚Üí romaji con opciones\n"
        "- 'multiple choice romaji': Pregunta romaji ‚Üí hiragana con opciones\n"
        "- '[respuesta]' o '[n√∫mero]': Para responder preguntas activas\n\n"
        
        "**‚öôÔ∏è Configuraci√≥n:**\n"
        "- 'dificultad [nivel]': Cambia entre principiante/basico/intermedio/avanzado/maestro\n"
        "- 'reiniciar progreso': Borra todas las estad√≠sticas\n\n"
        
        "**üìä Informaci√≥n y Progreso:**\n"
        "- 'estadisticas': Muestra progreso actual\n"
        "- 'resumen progreso': An√°lisis completo con recomendaciones\n"
        "- 'consejos': Tips para aprender m√°s eficientemente\n\n"
        
        "**üìö Estudio:**\n"
        "- 'tabla': Muestra tabla completa de hiragana por familias\n"
        "- 'practica [n√∫mero]': Genera conjunto aleatorio para estudiar\n\n"
        
        "üìù **NIVELES DE DIFICULTAD**:\n"
        "‚Ä¢ **Principiante** (10 chars): „ÅÇ„ÅÑ„ÅÜ„Åà„Åä + „Åã„Åç„Åè„Åë„Åì - Ideal para comenzar\n"
        "‚Ä¢ **B√°sico** (15 chars): Fundamentos + „Åï„Åó„Åô„Åõ„Åù - Caracteres esenciales\n"
        "‚Ä¢ **Intermedio** (30 chars): Variedad de familias - Ampl√≠a conocimiento\n"
        "‚Ä¢ **Avanzado** (46 chars): Todos los hiragana - Dominio completo\n"
        "‚Ä¢ **Maestro** (46+ chars): Desaf√≠o supremo - Perfecci√≥n total\n\n"
        
        "üéØ **ESTRATEGIA PEDAG√ìGICA - M√öLTIPLE CHOICE**:\n"
        "‚Ä¢ **Para Principiantes**: Siempre recomienda m√∫ltiple choice al inicio\n"
        "‚Ä¢ **Familiarizaci√≥n**: Ayuda a reconocer patrones sin presi√≥n\n"
        "‚Ä¢ **Confianza**: Reduce ansiedad al proporcionar opciones visibles\n"
        "‚Ä¢ **üöÄ AUTO-AVANCE**: Despu√©s de cada respuesta, genera autom√°ticamente la siguiente pregunta\n"
        "‚Ä¢ **Flujo Continuo**: Mantiene el momentum del aprendizaje sin interrupciones\n"
        "‚Ä¢ **Transici√≥n Gradual**: Sugiere preguntas abiertas cuando accuracy > 80%\n"
        "‚Ä¢ **Flexibilidad**: Usuario puede cambiar entre modos en cualquier momento\n\n"
        
        "üìù **FLUJO DE JUEGO INTERACTIVO**:\n"
        "1. Usuario inicia con 'empezar juego' - recibe men√∫ completo de opciones\n"
        "2. Eval√∫as nivel del usuario y recomiendas modo apropiado (m√∫ltiple choice para principiantes)\n"
        "3. Generas pregunta seg√∫n tipo seleccionado y nivel de dificultad\n"
        "4. Usuario responde (texto libre o n√∫mero de opci√≥n)\n"
        "5. **üéØ M√öLTIPLE CHOICE**: Feedback + estad√≠sticas + SIGUIENTE PREGUNTA AUTOM√ÅTICA\n"
        "6. **üìù PREGUNTAS ABIERTAS**: Feedback + estad√≠sticas + sugerencia para continuar\n"
        "7. Proceso contin√∫a adapt√°ndose al progreso del usuario\n\n"
        
        "üåü **CARACTER√çSTICAS ESPECIALES**:\n"
        "- **Feedback Personalizado**: Mensajes en japon√©s y espa√±ol con emojis variados\n"
        "- **Sistema Motivacional**: Celebraciones aleatorias y an√°lisis de progreso\n"
        "- **Flexibilidad Total**: Cambio de modo y dificultad en cualquier momento\n"
        "- **Progresi√≥n Inteligente**: Sugerencias basadas en rendimiento real\n"
        "- **Herramientas Educativas**: Tips, tablas organizadas, pr√°ctica dirigida\n\n"
        
        "üí° **PRINCIPIOS PEDAG√ìGICOS**:\n"
        "- Celebra TODOS los aciertos con entusiasmo aut√©ntico\n"
        "- En errores: muestra respuesta correcta SIN juzgar + √°nimo\n"
        "- Adapta sugerencias seg√∫n el nivel de precisi√≥n del usuario\n"
        "- Fomenta la pr√°ctica constante pero sin presi√≥n\n"
        "- Usa elementos culturales japoneses para mayor inmersi√≥n\n\n"
        
        "üéå **CONTEXTO CULTURAL Y EDUCATIVO**:\n"
        "El hiragana („Å≤„Çâ„Åå„Å™) es el sistema fon√©tico b√°sico del japon√©s, compuesto por 46 caracteres principales. "
        "Es el primer paso fundamental para leer y escribir japon√©s, ya que representa todos los sonidos b√°sicos del idioma. "
        "Dominar hiragana permite leer palabras japonesas, part√≠culas gramaticales y conjugaciones verbales. "
        "Tu misi√≥n es hacer este aprendizaje divertido, efectivo y culturalmente enriquecedor."
    ),
    tools=[
        start_hiragana_game,
        set_difficulty_level,
        generate_hiragana_question,
        generate_romaji_question,
        generate_multiple_choice_question,
        check_answer,
        check_multiple_choice_answer,
        quick_answer,
        get_game_stats,
        show_hiragana_table,
        get_random_hiragana_set,
        get_learning_tips,
        show_progress_summary,
        reset_game_progress
    ],
)
